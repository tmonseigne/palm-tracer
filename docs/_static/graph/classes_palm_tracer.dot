digraph "classes_palm_tracer" {
rankdir=BT
charset="utf-8"
"palm_tracer.PALMTracer.PALMTracer" [color="black", fontcolor="black", label=<{PALMTracer|localizations : Optional[pd.DataFrame]<br ALIGN="LEFT"/>logger<br ALIGN="LEFT"/>palm_cpu<br ALIGN="LEFT"/>settings<br ALIGN="LEFT"/>tracking<br ALIGN="LEFT"/>tracks : Optional[pd.DataFrame]<br ALIGN="LEFT"/>visualization : Optional[np.ndarray]<br ALIGN="LEFT"/>|filter_localizations(localizations: pd.DataFrame, log: bool): pd.DataFrame<br ALIGN="LEFT"/>is_dll_valid()<br ALIGN="LEFT"/>process()<br ALIGN="LEFT"/>}>, shape="record", style="filled", fillcolor="#e6e6ac"];
"palm_tracer.UI.PALMTracerWidget.PALMTracerWidget" [color="black", fontcolor="black", label=<{PALMTracerWidget|hr_viewer : Optional[Viewer]<br ALIGN="LEFT"/>last_file : str<br ALIGN="LEFT"/>pt<br ALIGN="LEFT"/>viewer : str<br ALIGN="LEFT"/>|}>, shape="record", style="filled", fillcolor="#e6e6ac"];
"palm_tracer.Processing.Palm.Palm" [color="black", fontcolor="black", label=<{Palm|<br ALIGN="LEFT"/>|auto_threshold(image: np.ndarray, roi_size: int, max_iterations: int)<br ALIGN="LEFT"/>is_valid()<br ALIGN="LEFT"/>run(stack: np.ndarray, threshold: float, watershed: bool, gauss_fit: int, sigma: float, theta: float, roi_size: int, planes: Optional[list[int]]): pd.DataFrame<br ALIGN="LEFT"/>}>, shape="record", style="filled", fillcolor="#e6e6ac"];
"palm_tracer.Processing.Tracking.Tracking" [color="black", fontcolor="black", label=<{Tracking|<br ALIGN="LEFT"/>|is_valid()<br ALIGN="LEFT"/>run(localizations: pd.DataFrame, max_distance: float, min_life: int, decrease: float, cost_birth: float): pd.DataFrame<br ALIGN="LEFT"/>}>, shape="record", style="filled", fillcolor="#e6e6ac"];
"palm_tracer.Settings.Settings.Settings" [color="black", fontcolor="black", label=<{Settings|batch<br ALIGN="LEFT"/>calibration<br ALIGN="LEFT"/>filtering<br ALIGN="LEFT"/>gallery<br ALIGN="LEFT"/>localization<br ALIGN="LEFT"/>tracking<br ALIGN="LEFT"/>visualization_graph<br ALIGN="LEFT"/>visualization_hr<br ALIGN="LEFT"/>|from_dict(data: dict[str, Any]): 'Settings'<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>to_dict(): dict[str, Any]<br ALIGN="LEFT"/>tostring(): str<br ALIGN="LEFT"/>update_from_dict(data: dict[str, Any])<br ALIGN="LEFT"/>}>, shape="record", style="filled", fillcolor="#e6e6ac"];

"palm_tracer.PALMTracer.PALMTracer" -> "palm_tracer.UI.PALMTracerWidget.PALMTracerWidget" [arrowhead="diamond", arrowtail="none", fontcolor="#006400", label="pt", style="filled", fillcolor="#e6e6ac"];
"palm_tracer.Processing.Palm.Palm" -> "palm_tracer.PALMTracer.PALMTracer" [arrowhead="diamond", arrowtail="none", fontcolor="#006400", label="palm_cpu", style="filled", fillcolor="#e6e6ac"];
"palm_tracer.Processing.Tracking.Tracking" -> "palm_tracer.PALMTracer.PALMTracer" [arrowhead="diamond", arrowtail="none", fontcolor="#006400", label="tracking", style="filled", fillcolor="#e6e6ac"];
"palm_tracer.Settings.Settings.Settings" -> "palm_tracer.PALMTracer.PALMTracer" [arrowhead="diamond", arrowtail="none", fontcolor="#006400", label="settings", style="filled", fillcolor="#e6e6ac"];
}
