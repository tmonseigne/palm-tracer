digraph "classes_palm_tracer" {
rankdir=BT
charset="utf-8"
"palm_tracer.Settings.Types.BaseSettingType.BaseSettingType" [color="black", fontcolor="black", label=<{BaseSettingType|label : str<br ALIGN="LEFT"/>layout<br ALIGN="LEFT"/>|add_row(box)<br ALIGN="LEFT"/>connect(f: Any)<br ALIGN="LEFT"/>emit(value: Any)<br ALIGN="LEFT"/>from_dict(data: dict[str, Any]): 'BaseSettingType'<br ALIGN="LEFT"/><I>get_value</I>(): Any<br ALIGN="LEFT"/>initialize()<br ALIGN="LEFT"/><I>reset</I>()<br ALIGN="LEFT"/><I>set_value</I>(value: Any)<br ALIGN="LEFT"/><I>to_dict</I>(): dict[str, Any]<br ALIGN="LEFT"/><I>update_from_dict</I>(data: dict[str, Any])<br ALIGN="LEFT"/>}>, shape="record", style="filled", fillcolor="#acace6"];
"palm_tracer.Settings.Types.BrowseFile.BrowseFile" [color="black", fontcolor="black", label=<{BrowseFile|box<br ALIGN="LEFT"/>default : str<br ALIGN="LEFT"/>label<br ALIGN="LEFT"/>value : str<br ALIGN="LEFT"/>|browse_file()<br ALIGN="LEFT"/>get_value(): str<br ALIGN="LEFT"/>initialize()<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>set_value(value: str)<br ALIGN="LEFT"/>to_dict(): dict[str, Any]<br ALIGN="LEFT"/>update_from_dict(data: dict[str, Any])<br ALIGN="LEFT"/>}>, shape="record", style="filled", fillcolor="#acace6"];
"palm_tracer.Settings.Types.Button.Button" [color="black", fontcolor="black", label=<{Button|box<br ALIGN="LEFT"/>label<br ALIGN="LEFT"/>|connect(f: Any)<br ALIGN="LEFT"/>get_value(): bool<br ALIGN="LEFT"/>initialize()<br ALIGN="LEFT"/><I>reset</I>()<br ALIGN="LEFT"/><I>set_value</I>(value: str)<br ALIGN="LEFT"/>to_dict(): dict[str, Any]<br ALIGN="LEFT"/>update_from_dict(data: dict[str, Any])<br ALIGN="LEFT"/>}>, shape="record", style="filled", fillcolor="#acace6"];
"palm_tracer.Settings.Types.CheckBox.CheckBox" [color="black", fontcolor="black", label=<{CheckBox|box<br ALIGN="LEFT"/>default : bool<br ALIGN="LEFT"/>label<br ALIGN="LEFT"/>value : bool<br ALIGN="LEFT"/>|get_value(): bool<br ALIGN="LEFT"/>initialize()<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>set_value(value: bool)<br ALIGN="LEFT"/>to_dict(): dict[str, Any]<br ALIGN="LEFT"/>update_from_dict(data: dict[str, Any])<br ALIGN="LEFT"/>}>, shape="record", style="filled", fillcolor="#acace6"];
"palm_tracer.Settings.Types.CheckRangeFloat.CheckRangeFloat" [color="black", fontcolor="black", label=<{CheckRangeFloat|active<br ALIGN="LEFT"/>box : list[QDoubleSpinBox]<br ALIGN="LEFT"/>default : list[float]<br ALIGN="LEFT"/>label<br ALIGN="LEFT"/>limit : list[float]<br ALIGN="LEFT"/>precision : int<br ALIGN="LEFT"/>value : list[float]<br ALIGN="LEFT"/>|check_max(value: float)<br ALIGN="LEFT"/>check_min(value: float)<br ALIGN="LEFT"/>get_value(): list[float]<br ALIGN="LEFT"/>initialize()<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>set_value(value: list[float])<br ALIGN="LEFT"/>to_dict(): dict[str, Any]<br ALIGN="LEFT"/>toggle_active(state: int)<br ALIGN="LEFT"/>update_from_dict(data: dict[str, Any])<br ALIGN="LEFT"/>}>, shape="record", style="filled", fillcolor="#acace6"];
"palm_tracer.Settings.Types.CheckRangeInt.CheckRangeInt" [color="black", fontcolor="black", label=<{CheckRangeInt|active<br ALIGN="LEFT"/>box : list[QSpinBox]<br ALIGN="LEFT"/>default : list[int]<br ALIGN="LEFT"/>label<br ALIGN="LEFT"/>limit : list[int]<br ALIGN="LEFT"/>value : list[int]<br ALIGN="LEFT"/>|check_max(value: int)<br ALIGN="LEFT"/>check_min(value: int)<br ALIGN="LEFT"/>get_value(): list[int]<br ALIGN="LEFT"/>initialize()<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>set_value(value: list[int])<br ALIGN="LEFT"/>to_dict(): dict[str, Any]<br ALIGN="LEFT"/>toggle_active(state: int)<br ALIGN="LEFT"/>update_from_dict(data: dict[str, Any])<br ALIGN="LEFT"/>}>, shape="record", style="filled", fillcolor="#acace6"];
"palm_tracer.Settings.Types.Combo.Combo" [color="black", fontcolor="black", label=<{Combo|box<br ALIGN="LEFT"/>default : int<br ALIGN="LEFT"/>items : list[str]<br ALIGN="LEFT"/>label<br ALIGN="LEFT"/>value : int<br ALIGN="LEFT"/>|get_value(): int<br ALIGN="LEFT"/>initialize()<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>set_value(value: int)<br ALIGN="LEFT"/>to_dict(): dict[str, Any]<br ALIGN="LEFT"/>update_from_dict(data: dict[str, Any])<br ALIGN="LEFT"/>}>, shape="record", style="filled", fillcolor="#acace6"];
"palm_tracer.Settings.Types.FileList.FileList" [color="black", fontcolor="black", label=<{FileList|box<br ALIGN="LEFT"/>buttons : dict[str, QPushButton]<br ALIGN="LEFT"/>default : int<br ALIGN="LEFT"/>items : list[str]<br ALIGN="LEFT"/>label<br ALIGN="LEFT"/>value : int<br ALIGN="LEFT"/>|add_file()<br ALIGN="LEFT"/>clear_files()<br ALIGN="LEFT"/>get_list(): list[str]<br ALIGN="LEFT"/>get_selected(): str<br ALIGN="LEFT"/>get_value(): int<br ALIGN="LEFT"/>initialize()<br ALIGN="LEFT"/>remove_file()<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>set_value(value: int)<br ALIGN="LEFT"/>to_dict(): dict[str, Any]<br ALIGN="LEFT"/>update_box()<br ALIGN="LEFT"/>update_from_dict(data: dict[str, Any])<br ALIGN="LEFT"/>}>, shape="record", style="filled", fillcolor="#acace6"];
"palm_tracer.Settings.Types.SignalWrapper.SignalWrapper" [color="black", fontcolor="black", label=<{SignalWrapper|<br ALIGN="LEFT"/>|connect(f)<br ALIGN="LEFT"/>emit(value)<br ALIGN="LEFT"/>}>, shape="record", style="filled", fillcolor="#acace6"];
"palm_tracer.Settings.Types.SpinFloat.SpinFloat" [color="black", fontcolor="black", label=<{SpinFloat|box<br ALIGN="LEFT"/>default : float<br ALIGN="LEFT"/>label<br ALIGN="LEFT"/>max : float<br ALIGN="LEFT"/>min : float<br ALIGN="LEFT"/>precision : int<br ALIGN="LEFT"/>step : float<br ALIGN="LEFT"/>value : float<br ALIGN="LEFT"/>|get_value(): float<br ALIGN="LEFT"/>initialize()<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>set_value(value: float)<br ALIGN="LEFT"/>to_dict(): dict[str, Any]<br ALIGN="LEFT"/>update_from_dict(data: dict[str, Any])<br ALIGN="LEFT"/>}>, shape="record", style="filled", fillcolor="#acace6"];
"palm_tracer.Settings.Types.SpinInt.SpinInt" [color="black", fontcolor="black", label=<{SpinInt|box<br ALIGN="LEFT"/>default : int<br ALIGN="LEFT"/>label<br ALIGN="LEFT"/>max : int<br ALIGN="LEFT"/>min : int<br ALIGN="LEFT"/>step : int<br ALIGN="LEFT"/>value : int<br ALIGN="LEFT"/>|get_value(): int<br ALIGN="LEFT"/>initialize()<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>set_value(value: int)<br ALIGN="LEFT"/>to_dict(): dict[str, Any]<br ALIGN="LEFT"/>update_from_dict(data: dict[str, Any])<br ALIGN="LEFT"/>}>, shape="record", style="filled", fillcolor="#acace6"];

"palm_tracer.Settings.Types.BrowseFile.BrowseFile" -> "palm_tracer.Settings.Types.BaseSettingType.BaseSettingType" [arrowhead="empty", arrowtail="none", style="filled", fillcolor="#e6ace6"];
"palm_tracer.Settings.Types.Button.Button" -> "palm_tracer.Settings.Types.BaseSettingType.BaseSettingType" [arrowhead="empty", arrowtail="none", style="filled", fillcolor="#e6ace6"];
"palm_tracer.Settings.Types.CheckBox.CheckBox" -> "palm_tracer.Settings.Types.BaseSettingType.BaseSettingType" [arrowhead="empty", arrowtail="none", style="filled", fillcolor="#e6ace6"];
"palm_tracer.Settings.Types.CheckRangeFloat.CheckRangeFloat" -> "palm_tracer.Settings.Types.BaseSettingType.BaseSettingType" [arrowhead="empty", arrowtail="none", style="filled", fillcolor="#e6ace6"];
"palm_tracer.Settings.Types.CheckRangeInt.CheckRangeInt" -> "palm_tracer.Settings.Types.BaseSettingType.BaseSettingType" [arrowhead="empty", arrowtail="none", style="filled", fillcolor="#e6ace6"];
"palm_tracer.Settings.Types.Combo.Combo" -> "palm_tracer.Settings.Types.BaseSettingType.BaseSettingType" [arrowhead="empty", arrowtail="none", style="filled", fillcolor="#e6ace6"];
"palm_tracer.Settings.Types.FileList.FileList" -> "palm_tracer.Settings.Types.BaseSettingType.BaseSettingType" [arrowhead="empty", arrowtail="none", style="filled", fillcolor="#e6ace6"];
"palm_tracer.Settings.Types.SignalWrapper.SignalWrapper" -> "palm_tracer.Settings.Types.BaseSettingType.BaseSettingType" [arrowhead="diamond", arrowtail="none", fontcolor="#006400", label="__signal", style="filled", fillcolor="#e6ace6"];
"palm_tracer.Settings.Types.SpinFloat.SpinFloat" -> "palm_tracer.Settings.Types.BaseSettingType.BaseSettingType" [arrowhead="empty", arrowtail="none", style="filled", fillcolor="#e6ace6"];
"palm_tracer.Settings.Types.SpinInt.SpinInt" -> "palm_tracer.Settings.Types.BaseSettingType.BaseSettingType" [arrowhead="empty", arrowtail="none", style="filled", fillcolor="#e6ace6"];
}
