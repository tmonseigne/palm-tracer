# This workflows will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: PALM Tracer Test and Deploy

on:
  push:
    branches:
      - master
      - npe2
    tags:
      - "v*" # Push events to matching v*, i.e., v1.0, v20.15.10
  pull_request:
    branches:
      - master
      - npe2
  workflow_dispatch:


permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false


jobs:
  Test:
    name: Tests on ${{ matrix.platform }} for Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.platform }}
    timeout-minutes: 30
    strategy:
      fail-fast: false  # Continue other jobs if one matrix fail
      matrix:
        platform: [ ubuntu-latest, windows-latest, macos-latest ]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        #platform: [ windows-latest ]
        #python-version: [ "3.13" ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # It could works but it erase python path
      # - name: Install Qt
      #   uses: jurplel/install-qt-action@v4

      # Installation of vcredist2010 if problem install all (vcredist-all)
      - name: Install Dependencies and Libraries
        if: runner.os == 'Windows'
        run: |
          choco install vcredist2010 -y
          choco install 7zip -y
          7z x DLL.7z -p"${{ secrets.DLL_PASSWORD }}"

      # strategy borrowed from vispy for installing OpenGL libs on windows
      - name: Set up OpenGL for Windows
        if: runner.os == 'Windows'
        run: |
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          powershell gl-ci-helpers/appveyor/install_opengl.ps1

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools tox tox-gh-actions ansi2html

      # this runs the platform-specific tests declared in tox.ini
      - name: Run tests with tox
        uses: aganders3/headless-gui@v2
        with:
          run: python -m tox
        env:
          PLATFORM: ${{ matrix.platform }}

      - name: Manage Test Reports
        run: |
          python ./docs/tools/pytest_json_to_rst.py ./reports/test_report.json ./reports/test_report_ci_${{ matrix.platform }}_${{ matrix.python-version }}.rst
          mv ./reports/monitoring.html ./reports/monitoring_ci_${{ matrix.platform }}_${{ matrix.python-version }}.html
        continue-on-error: true  # Permet de continuer même si cette étape échoue

      - name: Upload Test Reports as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: reports-${{ matrix.platform }}_${{ matrix.python-version }}
          path: |
            reports/test_report_ci_*.rst
            reports/monitoring_ci_*.html
        continue-on-error: true  # Permet de continuer même si cette étape échoue

      - name: Upload coverage reports to Codecov
        if: matrix.platform == 'windows-latest' && matrix.python-version == '3.13'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: tmonseigne/palm-tracer

  Documentation:
    name: Build and Deploy Sphinx Documentation
    needs: [ Test ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Graphviz system package
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install .[documentation]

      - name: Download Test Reports
        uses: actions/download-artifact@v4
        with:
          path: docs/reports/
          pattern: reports-*
          merge-multiple: true

      - name: Build documentation
        run: |
          python ./docs/tools/generate_test_reports_toc.py
          sphinx-build -b html docs/ docs/_build/html

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload documentation to GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'docs/_build/html'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  #deploy:
  #  # this will run when you have tagged a commit, starting with "v*"
  #  # and requires that you have put your twine API key in your GitHub secrets (see readme for details)
  #  name: Build and Publish on Twine
  #  needs: [ Test ]
  #  runs-on: ubuntu-latest
  #  if: contains(github.ref, 'tags')
  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v4

  #    - name: Set up Python
  #      uses: actions/setup-python@v5
  #      with:
  #        python-version: "3.x"

  #    - name: Install dependencies
  #      run: |
  #        python -m pip install --upgrade pip
  #        pip install -U setuptools setuptools_scm wheel twine build

  #    - name: Build and publish
  #      env:
  #        TWINE_USERNAME: __token__
  #        TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
  #      run: |
  #        git tag
  #        python -m build .
  #        twine upload dist/*
